{
	"info": {
		"_postman_id": "dino-emenu-api-collection",
		"name": "Dino E-Menu API Collection",
		"description": "Comprehensive API collection for Dino E-Menu Backend - A restaurant e-menu management system with role-based access control.\n\n## Features\n- JWT Authentication\n- Role-based access control (SuperAdmin/Admin/Operator)\n- Multi-tenant workspace support\n- Complete restaurant management\n\n## Base URL\n- **Local Development**: `http://localhost:8080`\n- **Production**: `https://your-api-domain.com`\n\n## Authentication\nMost endpoints require JWT authentication. Include the token in the Authorization header:\n```\nAuthorization: Bearer {{access_token}}\n```\n\n## Environment Variables\nSet these variables in your Postman environment:\n- `base_url`: API base URL\n- `access_token`: JWT access token (obtained from login)\n- `refresh_token`: JWT refresh token\n- `user_id`: Current user ID\n- `workspace_id`: Current workspace ID\n- `venue_id`: Current venue ID",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "dino-emenu"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set base URL if not set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}",
					"",
					"// Log request details in console",
					"console.log('Making request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-extract tokens from auth responses",
					"if (pm.response.json() && pm.response.json().access_token) {",
					"    pm.environment.set('access_token', pm.response.json().access_token);",
					"    console.log('Access token updated');",
					"}",
					"",
					"if (pm.response.json() && pm.response.json().refresh_token) {",
					"    pm.environment.set('refresh_token', pm.response.json().refresh_token);",
					"    console.log('Refresh token updated');",
					"}",
					"",
					"// Auto-extract user info",
					"if (pm.response.json() && pm.response.json().user) {",
					"    const user = pm.response.json().user;",
					"    if (user.id) pm.environment.set('user_id', user.id);",
					"    if (user.workspace_id) pm.environment.set('workspace_id', user.workspace_id);",
					"    if (user.venue_id) pm.environment.set('venue_id', user.venue_id);",
					"}",
					"",
					"// Log response status",
					"console.log('Response status:', pm.response.status, pm.response.code);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Authentication",
			"description": "Authentication endpoints for user registration, login, and token management",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    pm.expect(pm.response.json()).to.have.property('success');",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"confirm_password\": \"SecurePass123!\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"mobile_number\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "register"]
						},
						"description": "Register a new user account. No authentication required."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set('access_token', jsonData.access_token);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    if (jsonData.user.id) {",
									"        pm.environment.set('user_id', jsonData.user.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"remember_me\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "login"]
						},
						"description": "Login with email and password to get access token."
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/me",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "me"]
						},
						"description": "Get current authenticated user information."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has new access token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set('access_token', jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "refresh"]
						},
						"description": "Refresh access token using refresh token."
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear tokens on successful logout",
									"pm.environment.unset('access_token');",
									"pm.environment.unset('refresh_token');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "logout"]
						},
						"description": "Logout current user and invalidate tokens."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"SecurePass123!\",\n    \"new_password\": \"NewSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "change-password"]
						},
						"description": "Change current user's password."
					},
					"response": []
				},
				{
					"name": "Get User Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permissions data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('permissions');",
									"    pm.expect(jsonData.data.permissions).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/permissions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "permissions"]
						},
						"description": "Get current user's permissions and role information."
					},
					"response": []
				},
				{
					"name": "Refresh User Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has refreshed permissions', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('refreshed_at');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/refresh-permissions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "refresh-permissions"]
						},
						"description": "Refresh current user's permissions for real-time updates."
					},
					"response": []
				},
				{
					"name": "Deactivate Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('is_active', false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/deactivate/{{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "deactivate", "{{venue_id}}"]
						},
						"description": "Deactivate venue by setting is_active to false. Requires SuperAdmin or venue owner permissions."
					},
					"response": []
				},
				{
					"name": "Activate Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('is_active', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/auth/activate/{{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "auth", "activate", "{{venue_id}}"]
						},
						"description": "Activate venue by setting is_active to true. Requires SuperAdmin or venue owner permissions."
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• User Management",
			"description": "User management endpoints for creating, updating, and managing users with role assignments",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has users array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/?page=1&page_size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "role",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of users with optional filtering by role, status, or search term."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{user_id}}"]
						},
						"description": "Get specific user by ID."
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created user ID for cleanup",
									"    pm.environment.set('created_user_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"newuser@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"confirm_password\": \"SecurePass123!\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Smith\",\n    \"mobile_number\": \"+1987654321\",\n    \"role_id\": null,\n    \"date_of_birth\": \"1990-01-15\",\n    \"gender\": \"female\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", ""]
						},
						"description": "Create a new user. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Jane Updated\",\n    \"last_name\": \"Smith Updated\",\n    \"mobile_number\": \"+1987654322\",\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{created_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{created_user_id}}"]
						},
						"description": "Update user information. Users can update their own profile, admins can update any user."
					},
					"response": []
				},
				{
					"name": "Change User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"SecurePass123!\",\n    \"new_password\": \"NewSecurePass123!\",\n    \"confirm_password\": \"NewSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{user_id}}", "change-password"]
						},
						"description": "Change user password. Users can change their own password, admins can change any user's password."
					},
					"response": []
				},
				{
					"name": "Assign Role to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role_id\": \"{{role_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{created_user_id}}/assign-role",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{created_user_id}}", "assign-role"]
						},
						"description": "Assign a role to a user. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Get User Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permissions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}/permissions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{user_id}}", "permissions"]
						},
						"description": "Get all permissions for a specific user (from their assigned role)."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{created_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "users", "{{created_user_id}}"]
						},
						"description": "Delete a user. Requires admin privileges. Usually performs soft delete."
					},
					"response": []
				}
			]
		},
		{
			"name": "üè¢ Workspace Management",
			"description": "Multi-tenant workspace management endpoints for creating and managing workspaces",
			"item": [
				{
					"name": "Get All Workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has workspaces array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/?page=1&page_size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of workspaces. SuperAdmin can see all, others see only their workspace."
					},
					"response": []
				},
				{
					"name": "Get Workspace by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has workspace data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/{{workspace_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", "{{workspace_id}}"]
						},
						"description": "Get specific workspace by ID."
					},
					"response": []
				},
				{
					"name": "Create Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has workspace data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created workspace ID",
									"    pm.environment.set('created_workspace_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Restaurant Group\",\n    \"description\": \"A test workspace for restaurant management\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", ""]
						},
						"description": "Create a new workspace. Requires SuperAdmin privileges."
					},
					"response": []
				},
				{
					"name": "Update Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Restaurant Group\",\n    \"description\": \"Updated description for the restaurant group\",\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/{{created_workspace_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", "{{created_workspace_id}}"]
						},
						"description": "Update workspace information. Requires SuperAdmin or workspace admin privileges."
					},
					"response": []
				},
				{
					"name": "Get Workspace Venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has venues array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/{{workspace_id}}/venues",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", "{{workspace_id}}", "venues"]
						},
						"description": "Get all venues belonging to a specific workspace."
					},
					"response": []
				},
				{
					"name": "Get Workspace Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has users array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/{{workspace_id}}/users",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", "{{workspace_id}}", "users"]
						},
						"description": "Get all users belonging to a specific workspace."
					},
					"response": []
				},
				{
					"name": "Workspace Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has analytics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_venues');",
									"    pm.expect(jsonData).to.have.property('total_users');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/{{workspace_id}}/analytics?period=30d",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", "{{workspace_id}}", "analytics"],
							"query": [
								{
									"key": "period",
									"value": "30d"
								}
							]
						},
						"description": "Get analytics data for a specific workspace."
					},
					"response": []
				},
				{
					"name": "Delete Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/workspaces/{{created_workspace_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "workspaces", "{{created_workspace_id}}"]
						},
						"description": "Delete a workspace. Requires SuperAdmin privileges. Usually performs soft delete."
					},
					"response": []
				}
			]
		},
		{
			"name": "üè™ Venue Management",
			"description": "Restaurant/cafe venue management endpoints for creating and managing venues",
			"item": [
				{
					"name": "Get All Venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has venues array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/?page=1&page_size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "price_range",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of venues with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Venue by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has venue data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('location');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{venue_id}}"]
						},
						"description": "Get specific venue by ID."
					},
					"response": []
				},
				{
					"name": "Create Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has venue data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created venue ID",
									"    pm.environment.set('created_venue_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Coffee Corner\",\n    \"description\": \"A cozy coffee shop with fresh pastries and artisan coffee\",\n    \"location\": {\n        \"address\": \"123 Main Street\",\n        \"city\": \"San Francisco\",\n        \"state\": \"California\",\n        \"country\": \"United States\",\n        \"postal_code\": \"94102\",\n        \"landmark\": \"Near Union Square\"\n    },\n    \"mobile_number\": \"+14155551234\",\n    \"email\": \"info@coffecorner.com\",\n    \"website\": \"https://www.coffecorner.com\",\n    \"cuisine_types\": [\"Coffee\", \"Pastries\", \"Light Meals\"],\n    \"price_range\": \"budget\",\n    \"subscription_plan\": \"basic\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", ""]
						},
						"description": "Create a new venue. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Update Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Coffee Corner - Updated\",\n    \"description\": \"An updated cozy coffee shop with fresh pastries and artisan coffee\",\n    \"mobile_number\": \"+14155551235\",\n    \"website\": \"https://www.coffecorner-updated.com\",\n    \"cuisine_types\": [\"Coffee\", \"Pastries\", \"Light Meals\", \"Breakfast\"],\n    \"price_range\": \"mid_range\",\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{created_venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{created_venue_id}}"]
						},
						"description": "Update venue information. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Get Venue Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has menu data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('categories');",
									"    pm.expect(jsonData).to.have.property('items');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{venue_id}}/menu",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{venue_id}}", "menu"]
						},
						"description": "Get complete menu for a specific venue."
					},
					"response": []
				},
				{
					"name": "Get Venue Tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has tables array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{venue_id}}/tables",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{venue_id}}", "tables"]
						},
						"description": "Get all tables for a specific venue."
					},
					"response": []
				},
				{
					"name": "Get Venue Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has orders data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{venue_id}}/orders?status=pending&date_from=2024-01-01",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{venue_id}}", "orders"],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "date_from",
									"value": "2024-01-01"
								},
								{
									"key": "date_to",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "Get orders for a specific venue with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Venue Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has analytics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_orders');",
									"    pm.expect(jsonData).to.have.property('total_revenue');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{venue_id}}/analytics?period=7d",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{venue_id}}", "analytics"],
							"query": [
								{
									"key": "period",
									"value": "7d"
								}
							]
						},
						"description": "Get analytics data for a specific venue."
					},
					"response": []
				},
				{
					"name": "Update Venue Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"maintenance\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{venue_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{venue_id}}", "status"]
						},
						"description": "Update venue operational status (active, inactive, maintenance, closed)."
					},
					"response": []
				},
				{
					"name": "Delete Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/venues/{{created_venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "venues", "{{created_venue_id}}"]
						},
						"description": "Delete a venue. Requires admin privileges. Usually performs soft delete."
					},
					"response": []
				}
			]
		},
		{
			"name": "üçΩÔ∏è Menu Management",
			"description": "Menu categories and items management endpoints",
			"item": [
				{
					"name": "Get Menu Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has categories array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/categories?venue_id={{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "categories"],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get all menu categories for a venue."
					},
					"response": []
				},
				{
					"name": "Create Menu Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has category data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created category ID",
									"    pm.environment.set('created_category_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Beverages\",\n    \"description\": \"Hot and cold beverages including coffee, tea, and soft drinks\",\n    \"venue_id\": \"{{venue_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/categories",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "categories"]
						},
						"description": "Create a new menu category."
					},
					"response": []
				},
				{
					"name": "Update Menu Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Hot & Cold Beverages\",\n    \"description\": \"Premium hot and cold beverages including specialty coffee, tea, and refreshing drinks\",\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}"]
						},
						"description": "Update a menu category."
					},
					"response": []
				},
				{
					"name": "Get Menu Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has items array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/items?venue_id={{venue_id}}&page=1&page_size=20",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "items"],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "category_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_available",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_vegetarian",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get menu items with optional filtering by category, availability, etc."
					},
					"response": []
				},
				{
					"name": "Get Menu Item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has item data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('base_price');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{menu_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "items", "{{menu_item_id}}"]
						},
						"description": "Get specific menu item by ID."
					},
					"response": []
				},
				{
					"name": "Create Menu Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has item data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created item ID",
									"    pm.environment.set('created_menu_item_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Cappuccino\",\n    \"description\": \"Rich espresso with steamed milk and a layer of foam, served in a ceramic cup\",\n    \"base_price\": 4.50,\n    \"category_id\": \"{{created_category_id}}\",\n    \"venue_id\": \"{{venue_id}}\",\n    \"is_vegetarian\": true,\n    \"spice_level\": \"mild\",\n    \"preparation_time_minutes\": 5,\n    \"nutritional_info\": {\n        \"calories\": 120\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/items",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "items"]
						},
						"description": "Create a new menu item."
					},
					"response": []
				},
				{
					"name": "Update Menu Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Premium Cappuccino\",\n    \"description\": \"Rich espresso with steamed organic milk and a perfect layer of foam, served in a handcrafted ceramic cup\",\n    \"base_price\": 5.00,\n    \"is_available\": true,\n    \"preparation_time_minutes\": 6,\n    \"nutritional_info\": {\n        \"calories\": 130\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_menu_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "items", "{{created_menu_item_id}}"]
						},
						"description": "Update a menu item."
					},
					"response": []
				},
				{
					"name": "Update Item Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_available\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_menu_item_id}}/availability",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "items", "{{created_menu_item_id}}", "availability"]
						},
						"description": "Update menu item availability status."
					},
					"response": []
				},
				{
					"name": "Get Items by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has items array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}/items",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}", "items"]
						},
						"description": "Get all items in a specific category."
					},
					"response": []
				},
				{
					"name": "Search Menu Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has search results', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/search?venue_id={{venue_id}}&q=coffee&is_vegetarian=true",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "search"],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								},
								{
									"key": "q",
									"value": "coffee"
								},
								{
									"key": "is_vegetarian",
									"value": "true"
								},
								{
									"key": "max_price",
									"value": "",
									"disabled": true
								},
								{
									"key": "spice_level",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Search menu items by name, description, or other criteria."
					},
					"response": []
				},
				{
					"name": "Delete Menu Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_menu_item_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "items", "{{created_menu_item_id}}"]
						},
						"description": "Delete a menu item."
					},
					"response": []
				},
				{
					"name": "Delete Menu Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}"]
						},
						"description": "Delete a menu category (only if no items are assigned)."
					},
					"response": []
				}
			]
		},
		{
			"name": "üçΩÔ∏è Enhanced Menu Management",
			"description": "Enhanced menu management with image uploads, bulk operations, and advanced search",
			"item": [
				{
					"name": "üìÇ Menu Categories",
					"description": "Menu category management endpoints",
					"item": [
						{
							"name": "Get Menu Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has categories data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories?page=1&page_size=10&venue_id={{venue_id}}&is_active=true",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories"],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "10"
										},
										{
											"key": "venue_id",
											"value": "{{venue_id}}"
										},
										{
											"key": "is_active",
											"value": "true"
										}
									]
								},
								"description": "Get paginated list of menu categories with filtering."
							},
							"response": []
						},
						{
							"name": "Create Menu Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response has category data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    ",
											"    // Store category ID for further operations",
											"    pm.environment.set('created_category_id', jsonData.data.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Beverages\",\n    \"description\": \"Hot and cold beverages including coffee, tea, and juices\",\n    \"venue_id\": \"{{venue_id}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories"]
								},
								"description": "Create a new menu category."
							},
							"response": []
						},
						{
							"name": "Get Category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has category data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('name');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}"]
								},
								"description": "Get specific menu category by ID."
							},
							"response": []
						},
						{
							"name": "Update Menu Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Hot & Cold Beverages\",\n    \"description\": \"Updated description for beverages category\",\n    \"is_active\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}"]
								},
								"description": "Update menu category information."
							},
							"response": []
						},
						{
							"name": "Upload Category Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has image URL', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('image_url');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}/image",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}", "image"]
								},
								"description": "Upload image for menu category."
							},
							"response": []
						},
						{
							"name": "Delete Menu Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}"]
								},
								"description": "Delete menu category (soft delete by deactivating)."
							},
							"response": []
						}
					]
				},
				{
					"name": "üçï Menu Items",
					"description": "Menu item management endpoints",
					"item": [
						{
							"name": "Get Menu Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has items data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items?page=1&page_size=10&venue_id={{venue_id}}&category_id={{created_category_id}}&is_available=true&is_vegetarian=true&spice_level=mild",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items"],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "10"
										},
										{
											"key": "venue_id",
											"value": "{{venue_id}}"
										},
										{
											"key": "category_id",
											"value": "{{created_category_id}}"
										},
										{
											"key": "is_available",
											"value": "true"
										},
										{
											"key": "is_vegetarian",
											"value": "true",
											"disabled": true
										},
										{
											"key": "spice_level",
											"value": "mild",
											"disabled": true
										}
									]
								},
								"description": "Get paginated list of menu items with filtering."
							},
							"response": []
						},
						{
							"name": "Create Menu Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response has item data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    ",
											"    // Store item ID for further operations",
											"    pm.environment.set('created_item_id', jsonData.data.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cappuccino\",\n    \"description\": \"Rich espresso with steamed milk and foam, topped with cocoa powder\",\n    \"base_price\": 4.50,\n    \"category_id\": \"{{created_category_id}}\",\n    \"venue_id\": \"{{venue_id}}\",\n    \"is_vegetarian\": true,\n    \"spice_level\": \"mild\",\n    \"preparation_time_minutes\": 5\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items"]
								},
								"description": "Create a new menu item."
							},
							"response": []
						},
						{
							"name": "Get Menu Item by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has item data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('base_price');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_item_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items", "{{created_item_id}}"]
								},
								"description": "Get specific menu item by ID."
							},
							"response": []
						},
						{
							"name": "Update Menu Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Premium Cappuccino\",\n    \"description\": \"Rich espresso with steamed milk and foam, topped with premium cocoa powder\",\n    \"base_price\": 5.00,\n    \"preparation_time_minutes\": 6,\n    \"is_available\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_item_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items", "{{created_item_id}}"]
								},
								"description": "Update menu item information."
							},
							"response": []
						},
						{
							"name": "Upload Item Images",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has image URLs', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('image_urls');",
											"    pm.expect(jsonData.data.image_urls).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"type": "file",
											"src": []
										},
										{
											"key": "files",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_item_id}}/images",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items", "{{created_item_id}}", "images"]
								},
								"description": "Upload multiple images for menu item."
							},
							"response": []
						},
						{
							"name": "Delete Menu Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items/{{created_item_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items", "{{created_item_id}}"]
								},
								"description": "Delete menu item (soft delete by marking unavailable)."
							},
							"response": []
						}
					]
				},
				{
					"name": "üîç Search & Filter",
					"description": "Advanced search and filtering endpoints",
					"item": [
						{
							"name": "Get Venue Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has categories array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/venues/{{venue_id}}/categories",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "venues", "{{venue_id}}", "categories"]
								},
								"description": "Get all categories for a specific venue."
							},
							"response": []
						},
						{
							"name": "Get Venue Menu Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has items array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/venues/{{venue_id}}/items?category_id={{created_category_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "venues", "{{venue_id}}", "items"],
									"query": [
										{
											"key": "category_id",
											"value": "{{created_category_id}}",
											"disabled": true
										}
									]
								},
								"description": "Get all menu items for a venue with optional category filter."
							},
							"response": []
						},
						{
							"name": "Search Menu Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has search results', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/venues/{{venue_id}}/search?q=coffee",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "venues", "{{venue_id}}", "search"],
									"query": [
										{
											"key": "q",
											"value": "coffee"
										}
									]
								},
								"description": "Search menu items within a venue by name or description."
							},
							"response": []
						}
					]
				},
				{
					"name": "‚ö° Bulk Operations",
					"description": "Bulk operations for menu management",
					"item": [
						{
							"name": "Bulk Update Item Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item_ids\": [\"{{created_item_id}}\", \"item2_id\", \"item3_id\"],\n    \"is_available\": false\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/items/bulk-update-availability",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "items", "bulk-update-availability"]
								},
								"description": "Update availability for multiple menu items at once."
							},
							"response": []
						},
						{
							"name": "Toggle Category Items Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_available\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/menu/categories/{{created_category_id}}/items/toggle-availability",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "menu", "categories", "{{created_category_id}}", "items", "toggle-availability"]
								},
								"description": "Toggle availability for all items in a category."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ü™ë Table Management",
			"description": "Table management endpoints for creating and managing restaurant tables with QR codes",
			"item": [
				{
					"name": "Get All Tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has tables array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/?venue_id={{venue_id}}&page=1&page_size=20",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", ""],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "location",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of tables with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Table by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has table data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('table_number');",
									"    pm.expect(jsonData).to.have.property('capacity');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{table_id}}"]
						},
						"description": "Get specific table by ID."
					},
					"response": []
				},
				{
					"name": "Create Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has table data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created table ID",
									"    pm.environment.set('created_table_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table_number\": 15,\n    \"capacity\": 4,\n    \"location\": \"Window side\",\n    \"venue_id\": \"{{venue_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", ""]
						},
						"description": "Create a new table."
					},
					"response": []
				},
				{
					"name": "Update Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capacity\": 6,\n    \"location\": \"Premium window side\",\n    \"table_status\": \"available\",\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{created_table_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{created_table_id}}"]
						},
						"description": "Update table information."
					},
					"response": []
				},
				{
					"name": "Update Table Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table_status\": \"occupied\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "status"]
						},
						"description": "Update table status (available, booked, occupied, maintenance, out_of_service)."
					},
					"response": []
				},
				{
					"name": "Generate Table QR Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has QR code data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('qr_code_url');",
									"    pm.expect(jsonData).to.have.property('qr_data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/qr-code",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "qr-code"]
						},
						"description": "Generate QR code for table ordering."
					},
					"response": []
				},
				{
					"name": "Get Table QR Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has QR code data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('qr_code_url');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/qr-code",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "qr-code"]
						},
						"description": "Get existing QR code for a table."
					},
					"response": []
				},
				{
					"name": "Get Table Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has orders array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/orders?status=active",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "orders"],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "date_from",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get all orders for a specific table."
					},
					"response": []
				},
				{
					"name": "Get Tables by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has tables array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/status/available?venue_id={{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "status", "available"],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								}
							]
						},
						"description": "Get tables filtered by status (available, occupied, booked, etc.)."
					},
					"response": []
				},
				{
					"name": "Bulk Update Table Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('updated_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table_ids\": [\"{{table_id}}\", \"{{created_table_id}}\"],\n    \"table_status\": \"available\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/bulk-status",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "bulk-status"]
						},
						"description": "Update status for multiple tables at once."
					},
					"response": []
				},
				{
					"name": "Get Table Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has analytics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('utilization_rate');",
									"    pm.expect(jsonData).to.have.property('total_orders');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/analytics?period=7d",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "analytics"],
							"query": [
								{
									"key": "period",
									"value": "7d"
								}
							]
						},
						"description": "Get analytics data for a specific table."
					},
					"response": []
				},
				{
					"name": "Delete Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/tables/{{created_table_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "tables", "{{created_table_id}}"]
						},
						"description": "Delete a table. Usually performs soft delete."
					},
					"response": []
				}
			]
		},
		{
			"name": "ü™ë Enhanced Table Management",
			"description": "Complete table management with QR codes, status tracking, and bulk operations",
			"item": [
				{
					"name": "üìã Table CRUD Operations",
					"description": "Basic table management operations",
					"item": [
						{
							"name": "Get Tables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has tables data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/?page=1&page_size=10&venue_id={{venue_id}}&table_status=available&is_active=true",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", ""],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "10"
										},
										{
											"key": "venue_id",
											"value": "{{venue_id}}"
										},
										{
											"key": "table_status",
											"value": "available",
											"disabled": true
										},
										{
											"key": "is_active",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Get paginated list of tables with filtering options."
							},
							"response": []
						},
						{
							"name": "Create Table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response has table data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    pm.expect(jsonData.data).to.have.property('qr_code');",
											"    ",
											"    // Store table ID for further operations",
											"    pm.environment.set('created_table_id', jsonData.data.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"venue_id\": \"{{venue_id}}\",\n    \"table_number\": 15,\n    \"capacity\": 4,\n    \"location\": \"Main dining area\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", ""]
								},
								"description": "Create a new table with automatic QR code generation."
							},
							"response": []
						},
						{
							"name": "Get Table by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has table data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('table_number');",
											"    pm.expect(jsonData).to.have.property('qr_code');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{created_table_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{created_table_id}}"]
								},
								"description": "Get specific table by ID."
							},
							"response": []
						},
						{
							"name": "Update Table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"capacity\": 6,\n    \"location\": \"VIP dining area\",\n    \"table_status\": \"available\",\n    \"is_active\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{created_table_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{created_table_id}}"]
								},
								"description": "Update table information."
							},
							"response": []
						},
						{
							"name": "Delete Table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{created_table_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{created_table_id}}"]
								},
								"description": "Delete table (soft delete by deactivating)."
							},
							"response": []
						}
					]
				},
				{
					"name": "üîÑ Table Status Management",
					"description": "Table status tracking and management",
					"item": [
						{
							"name": "Update Table Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"new_status\": \"occupied\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/status",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "status"]
								},
								"description": "Update table status. Valid statuses: available, occupied, booked, maintenance, out_of_service."
							},
							"response": []
						},
						{
							"name": "Occupy Table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/occupy",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "occupy"]
								},
								"description": "Mark table as occupied."
							},
							"response": []
						},
						{
							"name": "Free Table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/free",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "free"]
								},
								"description": "Mark table as available."
							},
							"response": []
						}
					]
				},
				{
					"name": "üì± QR Code Management",
					"description": "QR code generation and verification",
					"item": [
						{
							"name": "Get Table QR Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has QR code data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('qr_code');",
											"    pm.expect(jsonData).to.have.property('venue_id');",
											"    pm.expect(jsonData).to.have.property('table_number');",
											"    ",
											"    // Store QR code for verification test",
											"    pm.environment.set('table_qr_code', jsonData.qr_code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/qr-code",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "qr-code"]
								},
								"description": "Get QR code data for table."
							},
							"response": []
						},
						{
							"name": "Regenerate Table QR Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has new QR code', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('qr_code');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/{{table_id}}/regenerate-qr",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "{{table_id}}", "regenerate-qr"]
								},
								"description": "Regenerate QR code for table."
							},
							"response": []
						},
						{
							"name": "Verify QR Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has verification data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('valid', true);",
											"    pm.expect(jsonData).to.have.property('table');",
											"    pm.expect(jsonData).to.have.property('venue');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"{{table_qr_code}}\""
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/verify-qr",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "verify-qr"]
								},
								"description": "Verify and decode table QR code."
							},
							"response": []
						}
					]
				},
				{
					"name": "üè™ Venue Table Operations",
					"description": "Venue-specific table operations",
					"item": [
						{
							"name": "Get Venue Tables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has tables array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/venues/{{venue_id}}/tables?status=available",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "venues", "{{venue_id}}", "tables"],
									"query": [
										{
											"key": "status",
											"value": "available",
											"disabled": true
										}
									]
								},
								"description": "Get all tables for a specific venue with optional status filter."
							},
							"response": []
						},
						{
							"name": "Get Venue Table Statistics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has statistics data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('venue_id');",
											"    pm.expect(jsonData).to.have.property('total_tables');",
											"    pm.expect(jsonData).to.have.property('active_tables');",
											"    pm.expect(jsonData).to.have.property('status_breakdown');",
											"    pm.expect(jsonData).to.have.property('utilization_rate');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/venues/{{venue_id}}/statistics",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "venues", "{{venue_id}}", "statistics"]
								},
								"description": "Get table statistics for a venue including utilization rates."
							},
							"response": []
						}
					]
				},
				{
					"name": "‚ö° Bulk Operations",
					"description": "Bulk table operations for efficiency",
					"item": [
						{
							"name": "Bulk Create Tables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"    pm.expect(jsonData.data).to.have.property('created_count');",
											"    pm.expect(jsonData.data).to.have.property('table_ids');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/bulk-create?venue_id={{venue_id}}&start_number=20&count=5&capacity=4&location=Outdoor seating",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "bulk-create"],
									"query": [
										{
											"key": "venue_id",
											"value": "{{venue_id}}"
										},
										{
											"key": "start_number",
											"value": "20"
										},
										{
											"key": "count",
											"value": "5"
										},
										{
											"key": "capacity",
											"value": "4"
										},
										{
											"key": "location",
											"value": "Outdoor seating"
										}
									]
								},
								"description": "Create multiple tables at once with sequential numbering."
							},
							"response": []
						},
						{
							"name": "Bulk Update Table Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table_ids\": [\"table1_id\", \"table2_id\", \"table3_id\"],\n    \"new_status\": \"maintenance\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/tables/bulk-update-status",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "tables", "bulk-update-status"]
								},
								"description": "Update status for multiple tables at once."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üõí Order Management",
			"description": "Order management endpoints for creating, updating, and tracking orders",
			"item": [
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has orders array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/?page=1&page_size=20",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "venue_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "order_type",
									"value": "",
									"disabled": true
								},
								{
									"key": "date_from",
									"value": "",
									"disabled": true
								},
								{
									"key": "date_to",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of orders with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has order data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('order_number');",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total_amount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/{{order_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "{{order_id}}"]
						},
						"description": "Get specific order by ID."
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has order data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('order_number');",
									"    ",
									"    // Store created order ID",
									"    pm.environment.set('created_order_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": \"{{venue_id}}\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"table_id\": \"{{table_id}}\",\n    \"order_type\": \"dine_in\",\n    \"items\": [\n        {\n            \"menu_item_id\": \"{{menu_item_id}}\",\n            \"quantity\": 2,\n            \"customizations\": {\n                \"size\": \"large\",\n                \"extra_shot\": true\n            },\n            \"special_instructions\": \"Extra hot please\"\n        },\n        {\n            \"menu_item_id\": \"{{menu_item_id_2}}\",\n            \"quantity\": 1,\n            \"customizations\": {},\n            \"special_instructions\": \"\"\n        }\n    ],\n    \"special_instructions\": \"Please serve together\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", ""]
						},
						"description": "Create a new order with items."
					},
					"response": []
				},
				{
					"name": "Create Public Order (QR)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has order data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('order_id');",
									"    pm.expect(jsonData).to.have.property('order_number');",
									"    pm.expect(jsonData).to.have.property('customer_id');",
									"    ",
									"    // Store created order and customer IDs",
									"    pm.environment.set('public_order_id', jsonData.order_id);",
									"    pm.environment.set('customer_id', jsonData.customer_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": \"{{venue_id}}\",\n    \"table_id\": \"{{table_id}}\",\n    \"customer\": {\n        \"name\": \"John Customer\",\n        \"mobile_number\": \"+1234567890\"\n    },\n    \"items\": [\n        {\n            \"menu_item_id\": \"{{menu_item_id}}\",\n            \"quantity\": 1,\n            \"customizations\": {\n                \"size\": \"medium\"\n            },\n            \"special_instructions\": \"No sugar\"\n        }\n    ],\n    \"order_type\": \"qr_scan\",\n    \"special_instructions\": \"Table service please\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/public",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "public"]
						},
						"description": "Create order from public interface (QR scan) without authentication."
					},
					"response": []
				},
				{
					"name": "Update Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"confirmed\",\n    \"estimated_ready_time\": \"2024-01-15T14:30:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/{{created_order_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "{{created_order_id}}", "status"]
						},
						"description": "Update order status (pending, confirmed, preparing, ready, served, cancelled)."
					},
					"response": []
				},
				{
					"name": "Update Payment Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_status\": \"paid\",\n    \"payment_method\": \"card\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/{{created_order_id}}/payment",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "{{created_order_id}}", "payment"]
						},
						"description": "Update order payment status and method."
					},
					"response": []
				},
				{
					"name": "Add Items to Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        {\n            \"menu_item_id\": \"{{menu_item_id}}\",\n            \"quantity\": 1,\n            \"customizations\": {\n                \"size\": \"small\"\n            },\n            \"special_instructions\": \"Extra foam\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/{{created_order_id}}/items",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "{{created_order_id}}", "items"]
						},
						"description": "Add additional items to an existing order."
					},
					"response": []
				},
				{
					"name": "Get Orders by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has orders array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/status/pending?venue_id={{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "status", "pending"],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								}
							]
						},
						"description": "Get orders filtered by status."
					},
					"response": []
				},
				{
					"name": "Get Order Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has analytics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_orders');",
									"    pm.expect(jsonData).to.have.property('total_revenue');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/analytics?venue_id={{venue_id}}&period=7d",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "analytics"],
							"query": [
								{
									"key": "venue_id",
									"value": "{{venue_id}}"
								},
								{
									"key": "period",
									"value": "7d"
								}
							]
						},
						"description": "Get order analytics for a venue."
					},
					"response": []
				},
				{
					"name": "Get Customer Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has orders array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/customer/{{customer_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "customer", "{{customer_id}}"]
						},
						"description": "Get all orders for a specific customer."
					},
					"response": []
				},
				{
					"name": "Cancel Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Customer requested cancellation\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/{{created_order_id}}/cancel",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "{{created_order_id}}", "cancel"]
						},
						"description": "Cancel an order with reason."
					},
					"response": []
				},
				{
					"name": "Get Order Receipt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has receipt data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('order_number');",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total_amount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/orders/{{created_order_id}}/receipt",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "orders", "{{created_order_id}}", "receipt"]
						},
						"description": "Get formatted receipt for an order."
					},
					"response": []
				}
			]
		},
		{
			"name": "üõí Enhanced Order Management",
			"description": "Enhanced order management with public ordering, QR code access, and real-time tracking",
			"item": [
				{
					"name": "üì± Public Ordering",
					"description": "Public ordering endpoints for QR code access and customer ordering",
					"item": [
						{
							"name": "Access Menu via QR Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has venue and menu data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('venue');",
											"    pm.expect(jsonData).to.have.property('categories');",
											"    pm.expect(jsonData).to.have.property('items');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/qr/{{qr_code}}",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "qr", "{{qr_code}}"]
								},
								"description": "Access venue menu through QR code scan. No authentication required."
							},
							"response": []
						},
						{
							"name": "Check Venue Operating Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has status information', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('is_open');",
											"    pm.expect(jsonData).to.have.property('current_status');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/venue/{{venue_id}}/status",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "venue", "{{venue_id}}", "status"]
								},
								"description": "Check if venue is currently open for orders. No authentication required."
							},
							"response": []
						},
						{
							"name": "Validate Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has validation result', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('is_valid');",
											"    pm.expect(jsonData).to.have.property('venue_open');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"venue_id\": \"{{venue_id}}\",\n    \"table_id\": \"{{table_id}}\",\n    \"items\": [\n        {\n            \"menu_item_id\": \"item123\",\n            \"quantity\": 2,\n            \"special_instructions\": \"No onions\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/validate-order",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "validate-order"]
								},
								"description": "Validate order before creation - check venue hours and item availability."
							},
							"response": []
						},
						{
							"name": "Create Public Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response has order data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('order_id');",
											"    pm.expect(jsonData).to.have.property('order_number');",
											"    pm.expect(jsonData).to.have.property('total_amount');",
											"    ",
											"    // Store order ID for tracking",
											"    pm.environment.set('public_order_id', jsonData.order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"venue_id\": \"{{venue_id}}\",\n    \"table_id\": \"{{table_id}}\",\n    \"customer\": {\n        \"name\": \"John Doe\",\n        \"phone\": \"+1234567890\"\n    },\n    \"items\": [\n        {\n            \"menu_item_id\": \"item123\",\n            \"quantity\": 2,\n            \"customizations\": {},\n            \"special_instructions\": \"No onions\"\n        },\n        {\n            \"menu_item_id\": \"item456\",\n            \"quantity\": 1,\n            \"special_instructions\": \"Extra spicy\"\n        }\n    ],\n    \"order_type\": \"qr_scan\",\n    \"special_instructions\": \"Please serve quickly\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/create-order",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "create-order"]
								},
								"description": "Create order from public interface (QR scan). No authentication required."
							},
							"response": []
						},
						{
							"name": "Track Order Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has order status', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('order_id');",
											"    pm.expect(jsonData.data).to.have.property('status');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/{{public_order_id}}/status",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "{{public_order_id}}", "status"]
								},
								"description": "Track order status using order ID. No authentication required."
							},
							"response": []
						},
						{
							"name": "Get Order Receipt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has receipt data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('order_number');",
											"    pm.expect(jsonData.data).to.have.property('items');",
											"    pm.expect(jsonData.data).to.have.property('total_amount');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/{{public_order_id}}/receipt",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "{{public_order_id}}", "receipt"]
								},
								"description": "Get detailed order receipt. No authentication required."
							},
							"response": []
						},
						{
							"name": "Submit Order Feedback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/public/{{public_order_id}}/feedback?rating=5&feedback=Great food and service!",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "public", "{{public_order_id}}", "feedback"],
									"query": [
										{
											"key": "rating",
											"value": "5"
										},
										{
											"key": "feedback",
											"value": "Great food and service!"
										}
									]
								},
								"description": "Submit feedback and rating for completed order. No authentication required."
							},
							"response": []
						}
					]
				},
				{
					"name": "üìã Order Status Management",
					"description": "Order status management and lifecycle endpoints",
					"item": [
						{
							"name": "Update Order Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"confirmed\""
								},
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/{{order_id}}/status",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "{{order_id}}", "status"]
								},
								"description": "Update order status with validation. Valid statuses: pending, confirmed, preparing, ready, served, delivered, cancelled."
							},
							"response": []
						},
						{
							"name": "Confirm Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/{{order_id}}/confirm?estimated_minutes=15",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "{{order_id}}", "confirm"],
									"query": [
										{
											"key": "estimated_minutes",
											"value": "15"
										}
									]
								},
								"description": "Confirm pending order with optional estimated preparation time."
							},
							"response": []
						},
						{
							"name": "Cancel Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response indicates success', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/{{order_id}}/cancel?reason=Customer requested cancellation",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "{{order_id}}", "cancel"],
									"query": [
										{
											"key": "reason",
											"value": "Customer requested cancellation"
										}
									]
								},
								"description": "Cancel order with optional reason."
							},
							"response": []
						}
					]
				},
				{
					"name": "üìä Order Analytics & Tracking",
					"description": "Order analytics and real-time tracking endpoints",
					"item": [
						{
							"name": "Get Venue Order Analytics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has analytics data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('total_orders');",
											"    pm.expect(jsonData).to.have.property('total_revenue');",
											"    pm.expect(jsonData).to.have.property('average_order_value');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/venues/{{venue_id}}/analytics?start_date=2024-01-01&end_date=2024-12-31",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "venues", "{{venue_id}}", "analytics"],
									"query": [
										{
											"key": "start_date",
											"value": "2024-01-01"
										},
										{
											"key": "end_date",
											"value": "2024-12-31"
										}
									]
								},
								"description": "Get order analytics for a venue with optional date range."
							},
							"response": []
						},
						{
							"name": "Get Live Order Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has live status data', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('summary');",
											"    pm.expect(jsonData).to.have.property('orders_by_status');",
											"    pm.expect(jsonData.summary).to.have.property('total_active_orders');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/venues/{{venue_id}}/live",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "venues", "{{venue_id}}", "live"]
								},
								"description": "Get real-time order status for venue dashboard."
							},
							"response": []
						},
						{
							"name": "Get Venue Orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has orders array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/venues/{{venue_id}}/orders?status=pending&limit=50",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "venues", "{{venue_id}}", "orders"],
									"query": [
										{
											"key": "status",
											"value": "pending"
										},
										{
											"key": "limit",
											"value": "50"
										}
									]
								},
								"description": "Get all orders for a venue with optional status filter."
							},
							"response": []
						},
						{
							"name": "Get Customer Orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response has orders array', function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/{{api_version}}/orders/customers/{{customer_id}}/orders?limit=20",
									"host": ["{{base_url}}"],
									"path": ["api", "{{api_version}}", "orders", "customers", "{{customer_id}}", "orders"],
									"query": [
										{
											"key": "limit",
											"value": "20"
										}
									]
								},
								"description": "Get order history for a customer."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "üëë Role Management",
			"description": "Role management endpoints for creating and managing user roles with permissions",
			"item": [
				{
					"name": "Get All Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has roles array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/?page=1&page_size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of roles with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Role by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has role data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{role_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{role_id}}"]
						},
						"description": "Get specific role by ID with permissions."
					},
					"response": []
				},
				{
					"name": "Create Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has role data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created role ID",
									"    pm.environment.set('created_role_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"operator\",\n    \"description\": \"Day-to-day operations with order and table management\",\n    \"permission_ids\": [],\n    \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", ""]
						},
						"description": "Create a new role. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Update Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Updated: Day-to-day operations with enhanced order and table management\",\n    \"is_active\": true,\n    \"permission_ids\": [\"{{permission_id_1}}\", \"{{permission_id_2}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}"]
						},
						"description": "Update role information and permissions."
					},
					"response": []
				},
				{
					"name": "Get Role Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permissions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{role_id}}/permissions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{role_id}}", "permissions"]
						},
						"description": "Get all permissions assigned to a specific role."
					},
					"response": []
				},
				{
					"name": "Assign Permissions to Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role_id\": \"{{created_role_id}}\",\n    \"permission_ids\": [\"{{permission_id_1}}\", \"{{permission_id_2}}\", \"{{permission_id_3}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}/permissions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}", "permissions"]
						},
						"description": "Assign permissions to a role (replaces existing permissions)."
					},
					"response": []
				},
				{
					"name": "Add Permissions to Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role_id\": \"{{created_role_id}}\",\n    \"permission_ids\": [\"{{permission_id_4}}\", \"{{permission_id_5}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}/permissions/add",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}", "permissions", "add"]
						},
						"description": "Add permissions to a role (keeps existing permissions)."
					},
					"response": []
				},
				{
					"name": "Remove Permissions from Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role_id\": \"{{created_role_id}}\",\n    \"permission_ids\": [\"{{permission_id_1}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}/permissions/remove",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}", "permissions", "remove"]
						},
						"description": "Remove specific permissions from a role."
					},
					"response": []
				},
				{
					"name": "Get Users with Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has users array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{role_id}}/users",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{role_id}}", "users"]
						},
						"description": "Get all users assigned to a specific role."
					},
					"response": []
				},
				{
					"name": "Get Role Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has statistics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_roles');",
									"    pm.expect(jsonData).to.have.property('active_roles');",
									"    pm.expect(jsonData).to.have.property('users_by_role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/statistics/overview",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "statistics", "overview"]
						},
						"description": "Get comprehensive role statistics."
					},
					"response": []
				},
				{
					"name": "Check Role Name Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has availability status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/check-name?name=manager",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "check-name"],
							"query": [
								{
									"key": "name",
									"value": "manager"
								},
								{
									"key": "exclude_id",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Check if role name is available."
					},
					"response": []
				},
				{
					"name": "Assign Single Permission (Simplified)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}/assign-permission?permission_id={{permission_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}", "assign-permission"],
							"query": [
								{
									"key": "permission_id",
									"value": "{{permission_id}}"
								}
							]
						},
						"description": "Assign a single permission to role (simplified for seeding)."
					},
					"response": []
				},
				{
					"name": "Bulk Assign Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('assigned_count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permission_ids\": [\"{{permission_id_1}}\", \"{{permission_id_2}}\", \"{{permission_id_3}}\", \"{{permission_id_4}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}/assign-permissions-bulk",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}", "assign-permissions-bulk"]
						},
						"description": "Assign multiple permissions to a role in bulk (for seeding)."
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/roles/{{created_role_id}}?hard_delete=false",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "roles", "{{created_role_id}}"],
							"query": [
								{
									"key": "hard_delete",
									"value": "false"
								}
							]
						},
						"description": "Delete a role. Requires admin privileges. Usually performs soft delete."
					},
					"response": []
				}
			]
		},
		{
			"name": "üîê Permission Management",
			"description": "Permission management endpoints for creating and managing granular permissions",
			"item": [
				{
					"name": "Get All Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permissions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/?page=1&page_size=50",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", ""],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "resource",
									"value": "",
									"disabled": true
								},
								{
									"key": "action",
									"value": "",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of permissions with optional filtering."
					},
					"response": []
				},
				{
					"name": "Get Permission by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permission data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('resource');",
									"    pm.expect(jsonData).to.have.property('action');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/{{permission_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "{{permission_id}}"]
						},
						"description": "Get specific permission by ID."
					},
					"response": []
				},
				{
					"name": "Create Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has permission data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store created permission ID",
									"    pm.environment.set('created_permission_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"menu.create\",\n    \"description\": \"Create new menu items and categories\",\n    \"resource\": \"menu\",\n    \"action\": \"create\",\n    \"scope\": \"venue\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", ""]
						},
						"description": "Create a new permission. Requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Update Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Create and manage menu items and categories with full control\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/{{created_permission_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "{{created_permission_id}}"]
						},
						"description": "Update permission information."
					},
					"response": []
				},
				{
					"name": "Get Permissions by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has categories array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        pm.expect(jsonData[0]).to.have.property('permissions');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/by-category",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "by-category"]
						},
						"description": "Get permissions grouped by category (resource)."
					},
					"response": []
				},
				{
					"name": "Get Permission Matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has matrix data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('resources');",
									"    pm.expect(jsonData).to.have.property('actions');",
									"    pm.expect(jsonData).to.have.property('matrix');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/matrix",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "matrix"]
						},
						"description": "Get permission matrix (resources vs actions)."
					},
					"response": []
				},
				{
					"name": "Get Available Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has resources array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/resources",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "resources"]
						},
						"description": "Get all available resource names."
					},
					"response": []
				},
				{
					"name": "Get Available Actions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has actions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/actions",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "actions"]
						},
						"description": "Get all available action names."
					},
					"response": []
				},
				{
					"name": "Bulk Create Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has bulk creation data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('created');",
									"    pm.expect(jsonData).to.have.property('skipped');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        {\n            \"name\": \"order.view\",\n            \"description\": \"View orders\",\n            \"resource\": \"order\",\n            \"action\": \"read\",\n            \"scope\": \"venue\"\n        },\n        {\n            \"name\": \"order.update\",\n            \"description\": \"Update order status\",\n            \"resource\": \"order\",\n            \"action\": \"update\",\n            \"scope\": \"venue\"\n        },\n        {\n            \"name\": \"table.view\",\n            \"description\": \"View tables\",\n            \"resource\": \"table\",\n            \"action\": \"read\",\n            \"scope\": \"venue\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/bulk-create",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "bulk-create"]
						},
						"description": "Create multiple permissions at once."
					},
					"response": []
				},
				{
					"name": "Get Permission Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has statistics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_permissions');",
									"    pm.expect(jsonData).to.have.property('system_permissions');",
									"    pm.expect(jsonData).to.have.property('permissions_by_resource');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/statistics",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "statistics"]
						},
						"description": "Get comprehensive permission statistics."
					},
					"response": []
				},
				{
					"name": "Check Permission Name Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has availability status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('available');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/check-name?name=venue.manage",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "check-name"],
							"query": [
								{
									"key": "name",
									"value": "venue.manage"
								},
								{
									"key": "exclude_id",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Check if permission name is available."
					},
					"response": []
				},
				{
					"name": "Get Unused Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has permissions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/unused",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "unused"]
						},
						"description": "Get permissions not assigned to any role."
					},
					"response": []
				},
				{
					"name": "Search Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has search results', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/?search=menu&resource=menu&action=create",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", ""],
							"query": [
								{
									"key": "search",
									"value": "menu"
								},
								{
									"key": "resource",
									"value": "menu"
								},
								{
									"key": "action",
									"value": "create"
								}
							]
						},
						"description": "Search permissions by name, resource, action, or description."
					},
					"response": []
				},
				{
					"name": "Delete Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response indicates success', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/permissions/{{created_permission_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "permissions", "{{created_permission_id}}"]
						},
						"description": "Delete a permission (only if not assigned to any role)."
					},
					"response": []
				}
			]
		},
		{
			"name": "üè• Health & Monitoring",
			"description": "Health check and system monitoring endpoints",
			"item": [
				{
					"name": "Root Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has service info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						},
						"description": "Root endpoint health check - no authentication required."
					},
					"response": []
				},
				{
					"name": "Basic Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has health status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						},
						"description": "Basic health check endpoint - no authentication required."
					},
					"response": []
				},
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has comprehensive health data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('endpoints');",
									"    pm.expect(jsonData).to.have.property('architecture');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "health"]
						},
						"description": "Comprehensive API health check with feature status."
					},
					"response": []
				},
				{
					"name": "Detailed Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has detailed health data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('checks');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health/detailed",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "health", "detailed"]
						},
						"description": "Detailed health check with database and service status."
					},
					"response": []
				},
				{
					"name": "Readiness Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has readiness status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('service');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/readiness",
							"host": ["{{base_url}}"],
							"path": ["readiness"]
						},
						"description": "Kubernetes/Cloud Run readiness check."
					},
					"response": []
				},
				{
					"name": "Liveness Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has liveness status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('service');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/liveness",
							"host": ["{{base_url}}"],
							"path": ["liveness"]
						},
						"description": "Kubernetes/Cloud Run liveness check."
					},
					"response": []
				},
				{
					"name": "API Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has statistics data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_endpoints');",
									"    pm.expect(jsonData).to.have.property('endpoint_groups');",
									"    pm.expect(jsonData).to.have.property('features');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "stats"]
						},
						"description": "Get API usage statistics and endpoint information."
					},
					"response": []
				},
				{
					"name": "Database Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has database status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('firestore');",
									"    pm.expect(jsonData).to.have.property('storage');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health/database",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "health", "database"]
						},
						"description": "Check database and storage connectivity."
					},
					"response": []
				},
				{
					"name": "System Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has system info', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('environment');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health/system",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "health", "system"]
						},
						"description": "Get system information and configuration."
					},
					"response": []
				}
			]
		}
		{
			"name": "üìä Dashboard Management",
			"description": "Role-based dashboard endpoints with real-time data and analytics",
			"item": [
				{
					"name": "üè¢ SuperAdmin Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has superadmin dashboard data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    pm.expect(jsonData.data).to.have.property('workspaces');",
									"    pm.expect(jsonData.data.summary).to.have.property('total_workspaces');",
									"    pm.expect(jsonData.data.summary).to.have.property('total_venues');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard/superadmin",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard", "superadmin"]
						},
						"description": "Get super admin dashboard with workspace-wide data. Requires SuperAdmin role."
					},
					"response": []
				},
				{
					"name": "üè™ Admin Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has admin dashboard data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    pm.expect(jsonData.data).to.have.property('recent_orders');",
									"    pm.expect(jsonData.data.summary).to.have.property('today_orders');",
									"    pm.expect(jsonData.data.summary).to.have.property('today_revenue');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard/admin",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard", "admin"]
						},
						"description": "Get admin dashboard with venue-specific data. Requires Admin role and venue assignment."
					},
					"response": []
				},
				{
					"name": "üë®‚Äçüíº Operator Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has operator dashboard data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    pm.expect(jsonData.data).to.have.property('active_orders');",
									"    pm.expect(jsonData.data.summary).to.have.property('active_orders');",
									"    pm.expect(jsonData.data.summary).to.have.property('pending_orders');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard/operator",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard", "operator"]
						},
						"description": "Get operator dashboard with operational data. Requires Operator role and venue assignment."
					},
					"response": []
				},
				{
					"name": "üéØ Auto Dashboard (Role-based)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has dashboard data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard"]
						},
						"description": "Get dashboard data automatically based on user role. Routes to appropriate dashboard."
					},
					"response": []
				},
				{
					"name": "üìà Dashboard Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has stats data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('user_role');",
									"    pm.expect(jsonData.data).to.have.property('last_updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard/stats",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard", "stats"]
						},
						"description": "Get general dashboard statistics that can be used across different dashboards."
					},
					"response": []
				},
				{
					"name": "üî¥ Live Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has live order data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    pm.expect(jsonData.data).to.have.property('orders_by_status');",
									"    pm.expect(jsonData.data.summary).to.have.property('total_active_orders');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard/live-orders/{{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard", "live-orders", "{{venue_id}}"]
						},
						"description": "Get real-time order status for a venue. Requires Admin/Operator role and venue access."
					},
					"response": []
				},
				{
					"name": "ü™ë Live Table Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has live table data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('tables');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    pm.expect(jsonData.data.summary).to.have.property('total_tables');",
									"    pm.expect(jsonData.data.summary).to.have.property('available');",
									"    pm.expect(jsonData.data.summary).to.have.property('occupied');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/dashboard/live-tables/{{venue_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "dashboard", "live-tables", "{{venue_id}}"]
						},
						"description": "Get real-time table status for a venue. Requires Admin/Operator role and venue access."
					},
					"response": []
				}
			]
		}
	]
}